import * as vscode from 'vscode';
import * as path from 'path';
import * as YAML from 'yaml';
import { getJsonFromYaml,getJsonFromJson } from './helpers';
import {
    quicktype,
    languageNamed,
    SerializedRenderResult,
    defaultTargetLanguages,
    JSONSchemaInput,
    InputData,
    TargetLanguage,
    jsonInputForTargetLanguage,
    RendererOptions,
    Options,
    inferenceFlagNames,
	GoTargetLanguage
} from "quicktype-core";
import { Console } from 'console';
import { type } from 'os';
import { worker } from 'cluster';

type ConvertedFile = {
	oldFileUri: vscode.Uri;
	oldFileContent: Uint8Array;
	// newFileUri: vscode.Uri;
};

const GenFileSuffix = ".go"

export enum ConvertFromType {
	Yaml = 'YAML',
	Json = 'JSON'
}

type TargetLanguagePick = {
    cancelled: boolean;
    lang: TargetLanguage;
};


async function getTargetLanguage(): Promise<TargetLanguagePick> {
    return {cancelled: false, lang: languageNamed("go")!};
}

export class FileToGo {
    private convertFromType: ConvertFromType;
	constructor(convertFromType: ConvertFromType) {
		this.convertFromType = convertFromType;
	}


    public async readFile(files: vscode.Uri[]): Promise<void> {
		const convertFilePromises = files.map(this.transformAndConvertFile);
		const convertedFiles = await Promise.all(convertFilePromises);
    }


    private transformAndConvertFile = async (oldFileUri: vscode.Uri): Promise<ConvertedFile> => {
		const oldFileContent = await vscode.workspace.fs.readFile(oldFileUri);
		const oldFileExtension = path.extname(oldFileUri.fsPath);

        console.log(oldFileContent);
        console.log(oldFileContent.toString());
		// const newFileExtension = FileToGo.getNewFileExtension(this.convertFromType);
		// const newFilePath = oldFileUri.fsPath.replace(oldFileExtension, newFileExtension);
		// const newFileUri = vscode.Uri.file(newFilePath);
		const newFileContent = FileToGo.getFileConverter(this.convertFromType)(oldFileContent.toString());
		console.log(typeof newFileContent);
        console.log(newFileContent.length);

		let j = JSON.parse(newFileContent);
		for (let p in j) {
			if (j.hasOwnProperty(p)) {                                                                                                                                                                                                                                   
				console.log(p);
			}
		}

		// await this.readFile(oldFileUri, newFileUri, newFileContent);
		const language = await getTargetLanguage();

		const inputData = new InputData();
		switch (this.convertFromType) {
			case 'YAML':
				await inputData.addSource("json", { name: "topLevelName", samples: [newFileContent] }, () =>
                	jsonInputForTargetLanguage(language.lang)
            	);
				break;
		
			default:
				break;
		}
		const rendererOptions: RendererOptions = {};
		let indentation: string;
		indentation = "\t";
		const configurationSection = "quicktype";
		const configuration = vscode.workspace.getConfiguration(configurationSection);
		const options: Partial<Options> = {
			lang: language.lang,
			inputData,
			leadingComments: ["Generated by https://quicktype.io"].concat([]),
			rendererOptions,
			indentation,
			inferMaps: configuration.inferMaps,
			inferEnums: configuration.inferEnums,
			inferDateTimes: configuration.inferDateTimes,
			inferIntegerStrings: configuration.inferIntegerStrings
		};
		for (const flag of inferenceFlagNames) {
			if (typeof configuration[flag] === "boolean") {
				options[flag] = configuration[flag];
			}
		}
		let result: SerializedRenderResult = await quicktype(options);
		const text = result.lines.join("\n");
		console.log(text);
		return { oldFileUri, oldFileContent };
	};


    private static getFileConverter(convertFromType: ConvertFromType) {
		return {
			[ConvertFromType.Json]: getJsonFromJson,
			[ConvertFromType.Yaml]: getJsonFromYaml
		}[convertFromType];
	}
}


type jsonFileInfo = {
	Keys: string[],
	Result: object,
};


export class PreprocessingFile {
	private convertFromType: ConvertFromType;
	constructor(convertFromType: ConvertFromType) {
		this.convertFromType = convertFromType;
	}


	public async GetDataInfo(uri: vscode.Uri) {
		const oldFileContent = await vscode.workspace.fs.readFile(uri);
		const oldFileExtension = path.extname(uri.fsPath);

		const workerSpace = path.dirname(uri.fsPath);
		
		const newFilePath = workerSpace + "/config.go"
		var setting: vscode.Uri = vscode.Uri.parse("untitled:" + newFilePath);

		console.log(oldFileContent);
		console.log(oldFileExtension);
		const fileData = this.readFile(oldFileContent.toString());
		vscode.workspace.openTextDocument(setting).then((a: vscode.TextDocument) => {
			vscode.window.showTextDocument(a, 1, false).then(e => {
				e.edit(edit => {
					edit.insert(new vscode.Position(0, 0), "Your advertisement here");
				});
			});
		}, (error: any) => {
			console.error(error);
			debugger;
		});

	}

	private readFile(file: string): string {
		let fileData: any;
		switch (this.convertFromType) {
			case 'YAML':
				fileData = YAML.parse(file, {});
				break;
			case 'JSON':
				fileData = JSON.parse(file)
			default:
				break;
		}
		
		let keys:Array<string> = [];
		// 获取当期所有key
		for (let k in fileData) {
			keys.push(k);
		}

		if (keys.length == 0) {
			// 说明文件或者内容异常 不能继续执行下一步
			vscode.window.showWarningMessage("The supplied file is abnormal");
		}
		console.log(keys);
		
		return fileData;
	}

}